// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`transform > basic 1`] = `
"<template><div class="markdown-body"><h1>Hello</h1>
<ul>
<li>A</li>
<li>B</li>
<li>C</li>
</ul>
</div></template>
<script setup>
import { computed } from 'vue'
const props = defineProps({ frontmatterMerge: { type: Object } })
const _frontmatter = {"title":"Hey"}
const frontmatter = computed(() => {
  if (props.frontmatterReplace && typeof props.frontmatterReplace === 'object') {
    const replaceKeys = Object.keys(props.frontmatterReplace)
    return Object.entries(_frontmatter).reduce((acc, [key, value]) => ({ ...acc, [key]: replaceKeys.includes(key) ? value : undefined }), {})
  }

  return { ..._frontmatter, ...props.frontmatterMerge }
})
defineExpose({ frontmatter: frontmatter.value })
</script>
<script>
export const title = "Hey"
</script>"
`;

exports[`transform > code escape 1`] = `
"<template><div class="markdown-body"><p>Hello <code v-pre>{{ world }}</code></p>
<pre><code class="language-js" v-pre>console.log(\`{{ world }}\`)
</code></pre>
</div></template>
<script setup>
import { computed } from 'vue'
const props = defineProps({ frontmatterMerge: { type: Object } })
const _frontmatter = {}
const frontmatter = computed(() => {
  if (props.frontmatterReplace && typeof props.frontmatterReplace === 'object') {
    const replaceKeys = Object.keys(props.frontmatterReplace)
    return Object.entries(_frontmatter).reduce((acc, [key, value]) => ({ ...acc, [key]: replaceKeys.includes(key) ? value : undefined }), {})
  }

  return { ..._frontmatter, ...props.frontmatterMerge }
})
defineExpose({ frontmatter: frontmatter.value })
</script>"
`;

exports[`transform > couldn't expose frontmatter 1`] = `
"<template><div class="markdown-body">
</div></template>
<script setup>
import { computed } from 'vue'
const props = defineProps({ frontmatterMerge: { type: Object } })
const _frontmatter = {"title":"Hey"}
const frontmatter = computed(() => {
  if (props.frontmatterReplace && typeof props.frontmatterReplace === 'object') {
    const replaceKeys = Object.keys(props.frontmatterReplace)
    return Object.entries(_frontmatter).reduce((acc, [key, value]) => ({ ...acc, [key]: replaceKeys.includes(key) ? value : undefined }), {})
  }

  return { ..._frontmatter, ...props.frontmatterMerge }
})
defineExpose({ test: 'test'})
</script>
<script>
export const title = "Hey"
</script>"
`;

exports[`transform > escapeCodeTagInterpolation 1`] = `
"<template><div class="markdown-body"><div>{{hello}}</div>
<pre><code class="language-ts" v-pre>&lt;div&gt;{{hello}}&lt;/div&gt;
</code></pre>
</div></template>
<script setup>
import { computed } from 'vue'
const props = defineProps({ frontmatterMerge: { type: Object } })
const _frontmatter = {}
const frontmatter = computed(() => {
  if (props.frontmatterReplace && typeof props.frontmatterReplace === 'object') {
    const replaceKeys = Object.keys(props.frontmatterReplace)
    return Object.entries(_frontmatter).reduce((acc, [key, value]) => ({ ...acc, [key]: replaceKeys.includes(key) ? value : undefined }), {})
  }

  return { ..._frontmatter, ...props.frontmatterMerge }
})
defineExpose({ frontmatter: frontmatter.value })
</script>"
`;

exports[`transform > export keyword frontmatters 1`] = `
"<template><div class="markdown-body"><p>Hello</p>
</div></template>
<script setup>
import { computed } from 'vue'
const props = defineProps({ frontmatterMerge: { type: Object } })
const _frontmatter = {"class":"text","default":"foo"}
const frontmatter = computed(() => {
  if (props.frontmatterReplace && typeof props.frontmatterReplace === 'object') {
    const replaceKeys = Object.keys(props.frontmatterReplace)
    return Object.entries(_frontmatter).reduce((acc, [key, value]) => ({ ...acc, [key]: replaceKeys.includes(key) ? value : undefined }), {})
  }

  return { ..._frontmatter, ...props.frontmatterMerge }
})
defineExpose({ frontmatter: frontmatter.value })
</script>
<script>
export const _class = "text"
export const _default = "foo"
</script>"
`;

exports[`transform > exposes frontmatter 1`] = `
"<template><div class="markdown-body"><h1>Hello</h1>
</div></template>
<script setup>
import { computed } from 'vue'
const props = defineProps({ frontmatterMerge: { type: Object } })
const _frontmatter = {"title":"Hey"}
const frontmatter = computed(() => {
  if (props.frontmatterReplace && typeof props.frontmatterReplace === 'object') {
    const replaceKeys = Object.keys(props.frontmatterReplace)
    return Object.entries(_frontmatter).reduce((acc, [key, value]) => ({ ...acc, [key]: replaceKeys.includes(key) ? value : undefined }), {})
  }

  return { ..._frontmatter, ...props.frontmatterMerge }
})
defineExpose({ frontmatter: frontmatter.value })
</script>
<script>
export const title = "Hey"
</script>"
`;

exports[`transform > frontmatter interpolation 1`] = `
"<template><div class="markdown-body"><h1>Hello World</h1>
<p>This is {{frontmatter.name}}</p>
</div></template>
<script setup>
import { computed } from 'vue'
const props = defineProps({ frontmatterMerge: { type: Object } })
const _frontmatter = {"name":"My Cool App"}
const frontmatter = computed(() => {
  if (props.frontmatterReplace && typeof props.frontmatterReplace === 'object') {
    const replaceKeys = Object.keys(props.frontmatterReplace)
    return Object.entries(_frontmatter).reduce((acc, [key, value]) => ({ ...acc, [key]: replaceKeys.includes(key) ? value : undefined }), {})
  }

  return { ..._frontmatter, ...props.frontmatterMerge }
})
defineExpose({ frontmatter: frontmatter.value })
</script>
<script>
export const name = "My Cool App"
</script>"
`;

exports[`transform > script setup 1`] = `
"<template><div class="markdown-body"><h1>Hello</h1>

</div></template>
<script setup lang="ts">
import { computed } from 'vue'
const props = defineProps({ frontmatterMerge: { type: Object } })
const _frontmatter = {}
const frontmatter = computed(() => {
  if (props.frontmatterReplace && typeof props.frontmatterReplace === 'object') {
    const replaceKeys = Object.keys(props.frontmatterReplace)
    return Object.entries(_frontmatter).reduce((acc, [key, value]) => ({ ...acc, [key]: replaceKeys.includes(key) ? value : undefined }), {})
  }

  return { ..._frontmatter, ...props.frontmatterMerge }
})
defineExpose({ frontmatter: frontmatter.value })
import Foo from './Foo.vue'
</script>"
`;

exports[`transform > style 1`] = `
"<template><div class="markdown-body"><h1>Hello</h1>

</div></template>
<script setup>
import { computed } from 'vue'
const props = defineProps({ frontmatterMerge: { type: Object } })
const _frontmatter = {}
const frontmatter = computed(() => {
  if (props.frontmatterReplace && typeof props.frontmatterReplace === 'object') {
    const replaceKeys = Object.keys(props.frontmatterReplace)
    return Object.entries(_frontmatter).reduce((acc, [key, value]) => ({ ...acc, [key]: replaceKeys.includes(key) ? value : undefined }), {})
  }

  return { ..._frontmatter, ...props.frontmatterMerge }
})
defineExpose({ frontmatter: frontmatter.value })
</script>
<style>h1 { color: red }</style>"
`;

exports[`transform > vue directives 1`] = `
"<template><div class="markdown-body">
<p><button @click="onClick"></button></p>
</div></template>
<script setup lang="ts">
import { computed } from 'vue'
const props = defineProps({ frontmatterMerge: { type: Object } })
const _frontmatter = {"name":"My Cool App"}
const frontmatter = computed(() => {
  if (props.frontmatterReplace && typeof props.frontmatterReplace === 'object') {
    const replaceKeys = Object.keys(props.frontmatterReplace)
    return Object.entries(_frontmatter).reduce((acc, [key, value]) => ({ ...acc, [key]: replaceKeys.includes(key) ? value : undefined }), {})
  }

  return { ..._frontmatter, ...props.frontmatterMerge }
})
defineExpose({ frontmatter: frontmatter.value })
function onClick() {
  // ...
}
</script>
<script lang="ts">
export const name = "My Cool App"
</script>"
`;
